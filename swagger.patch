diff --git a/modules/activiti-common-rest/src/main/java/org/activiti/rest/common/api/AbstractPaginateList.java b/modules/activiti-common-rest/src/main/java/org/activiti/rest/common/api/AbstractPaginateList.java
index 3ffe6cf..cccc45b 100644
--- a/modules/activiti-common-rest/src/main/java/org/activiti/rest/common/api/AbstractPaginateList.java
+++ b/modules/activiti-common-rest/src/main/java/org/activiti/rest/common/api/AbstractPaginateList.java
@@ -45,19 +45,19 @@ public abstract class AbstractPaginateList {
   	}
   	
   	// In case pagination request is incomplete, fill with values found in URL if possible
-  	if (paginateRequest.getStart() == null) {
+  	if (paginateRequest.getStart() == null && requestParams != null) {
   		paginateRequest.setStart(RequestUtil.getInteger(requestParams, "start", 0));
   	}
   	
-  	if (paginateRequest.getSize() == null) {
+  	if (paginateRequest.getSize() == null && requestParams != null) {
   		paginateRequest.setSize(RequestUtil.getInteger(requestParams, "size", 10));
   	}
   	
-  	if (paginateRequest.getOrder() == null) {
+  	if (paginateRequest.getOrder() == null && requestParams != null) {
   		paginateRequest.setOrder(requestParams.get("order"));
   	}
   	
-  	if (paginateRequest.getSort() == null) {
+  	if (paginateRequest.getSort() == null && requestParams != null) {
   		paginateRequest.setSort(requestParams.get("sort"));
   	}
       
diff --git a/modules/activiti-rest/pom.xml b/modules/activiti-rest/pom.xml
index c65cc1a..182b831 100644
--- a/modules/activiti-rest/pom.xml
+++ b/modules/activiti-rest/pom.xml
@@ -224,6 +224,12 @@
     </dependency>
     
     <dependency>
+	    <groupId>io.swagger</groupId>
+	    <artifactId>swagger-annotations</artifactId>
+	    <version>1.5.9</version>
+    </dependency>
+    
+    <dependency>
       <groupId>org.eclipse.jetty.orbit</groupId>
       <artifactId>javax.servlet</artifactId>
       <version>3.0.0.v201112011016</version>
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceBaseResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceBaseResource.java
index c2900d0..f1708b4 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceBaseResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceBaseResource.java
@@ -53,7 +53,7 @@ public class HistoricActivityInstanceBaseResource {
   @Autowired
   protected HistoryService historyService;
   
-  protected DataResponse getQueryResponse(HistoricActivityInstanceQueryRequest queryRequest, Map<String,String> allRequestParams) {
+  protected DataResponse getQueryResponse(HistoricActivityInstanceQueryRequest queryRequest) {
     HistoricActivityInstanceQuery query = historyService.createHistoricActivityInstanceQuery();
 
     // Populate query based on request
@@ -111,6 +111,6 @@ public class HistoricActivityInstanceBaseResource {
     }
 
     return new HistoricActivityInstancePaginateList(restResponseFactory).paginateList(
-        allRequestParams, queryRequest, query, "startTime", allowedSortProperties);
+        null, queryRequest, query, "startTime", allowedSortProperties);
   }
 }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResource.java
index 8d163a9..3a3ce84 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResource.java
@@ -14,14 +14,12 @@
 package org.activiti.rest.service.api.history;
 
 
-import java.util.Map;
-
 import javax.servlet.http.HttpServletRequest;
 
 import org.activiti.rest.common.api.DataResponse;
+import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 
@@ -32,58 +30,7 @@ import org.springframework.web.bind.annotation.RestController;
 public class HistoricActivityInstanceCollectionResource extends HistoricActivityInstanceBaseResource {
 
   @RequestMapping(value="/history/historic-activity-instances", method = RequestMethod.GET, produces = "application/json")
-  public DataResponse getHistoricActivityInstances(@RequestParam Map<String,String> allRequestParams, HttpServletRequest request) {
-    HistoricActivityInstanceQueryRequest query = new HistoricActivityInstanceQueryRequest();
-
-    // Populate query based on request
-    if (allRequestParams.get("activityId") != null) {
-      query.setActivityId(allRequestParams.get("activityId"));
-    }
-    
-    if (allRequestParams.get("activityInstanceId") != null) {
-      query.setActivityInstanceId(allRequestParams.get("activityInstanceId"));
-    }
-    
-    if (allRequestParams.get("activityName") != null) {
-      query.setActivityName(allRequestParams.get("activityName"));
-    }
-    
-    if (allRequestParams.get("activityType") != null) {
-      query.setActivityType(allRequestParams.get("activityType"));
-    }
-    
-    if (allRequestParams.get("executionId") != null) {
-      query.setExecutionId(allRequestParams.get("executionId"));
-    }
-    
-    if (allRequestParams.get("finished") != null) {
-      query.setFinished(Boolean.valueOf(allRequestParams.get("finished")));
-    }
-    
-    if (allRequestParams.get("taskAssignee") != null) {
-      query.setTaskAssignee(allRequestParams.get("taskAssignee"));
-    }
-    
-    if (allRequestParams.get("processInstanceId") != null) {
-      query.setProcessInstanceId(allRequestParams.get("processInstanceId"));
-    }
-    
-    if (allRequestParams.get("processDefinitionId") != null) {
-      query.setProcessDefinitionId(allRequestParams.get("processDefinitionId"));
-    }
-    
-    if (allRequestParams.get("tenantId") != null) {
-    	query.setTenantId(allRequestParams.get("tenantId"));
-    }
-    
-    if (allRequestParams.get("tenantIdLike") != null) {
-    	query.setTenantIdLike(allRequestParams.get("tenantIdLike"));
-    }
-    
-    if(allRequestParams.get("withoutTenantId") != null) {
-    	query.setWithoutTenantId(Boolean.valueOf(allRequestParams.get("withoutTenantId")));
-    }
-
-    return getQueryResponse(query, allRequestParams);
+  public DataResponse getHistoricActivityInstances(@ModelAttribute HistoricActivityInstanceQueryRequest historicActivityInstanceQueryRequest,HttpServletRequest request) {
+    return getQueryResponse(historicActivityInstanceQueryRequest);
   }
 }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceQueryResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceQueryResource.java
index f9198d4..5da54b6 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceQueryResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceQueryResource.java
@@ -35,7 +35,6 @@ public class HistoricActivityInstanceQueryResource extends HistoricActivityInsta
   @RequestMapping(value="/query/historic-activity-instances", method = RequestMethod.POST, produces = "application/json")
   public DataResponse queryActivityInstances(@RequestBody HistoricActivityInstanceQueryRequest queryRequest, 
       @RequestParam Map<String,String> allRequestParams, HttpServletRequest request) {
-    
-    return getQueryResponse(queryRequest, allRequestParams);
+    return getQueryResponse(queryRequest);
   }
 }
diff --git a/modules/activiti-secure-javascript/src/test/java/org/activiti/test/scripting/secure/SecureScriptingTest.java b/modules/activiti-secure-javascript/src/test/java/org/activiti/test/scripting/secure/SecureScriptingTest.java
index 264e2a5..62d21be 100644
--- a/modules/activiti-secure-javascript/src/test/java/org/activiti/test/scripting/secure/SecureScriptingTest.java
+++ b/modules/activiti-secure-javascript/src/test/java/org/activiti/test/scripting/secure/SecureScriptingTest.java
@@ -16,7 +16,7 @@ public class SecureScriptingTest extends SecureScriptingBaseTest {
   @Test
   public void testClassWhiteListing() {
     deployProcessDefinition("test-secure-script-class-white-listing.bpmn20.xml");
-
+    
     try {
       runtimeService.startProcessInstanceByKey("secureScripting");
       Assert.fail(); // Expecting exception
diff --git a/modules/activiti-webapp-rest2/pom.xml b/modules/activiti-webapp-rest2/pom.xml
index e4c3a6f..5c49ac5 100644
--- a/modules/activiti-webapp-rest2/pom.xml
+++ b/modules/activiti-webapp-rest2/pom.xml
@@ -138,5 +138,15 @@
       <version>3.1.0</version>
       <scope>provided</scope>
     </dependency>
+     <dependency>
+      <groupId>io.springfox</groupId>
+      <artifactId>springfox-swagger-ui</artifactId>
+      <version>2.4.0</version>
+    </dependency>
+    <dependency>
+      <groupId>io.springfox</groupId>
+      <artifactId>springfox-swagger2</artifactId>
+      <version>2.4.0</version>
+    </dependency>
   </dependencies>
 </project>
diff --git a/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/DispatcherServletConfiguration.java b/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/DispatcherServletConfiguration.java
index 333cf5a..2ca030f 100644
--- a/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/DispatcherServletConfiguration.java
+++ b/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/DispatcherServletConfiguration.java
@@ -15,11 +15,19 @@ import org.springframework.http.converter.json.MappingJackson2HttpMessageConvert
 import org.springframework.scheduling.annotation.EnableAsync;
 import org.springframework.web.multipart.MultipartResolver;
 import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;
+import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
 import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
 import org.springframework.web.servlet.i18n.SessionLocaleResolver;
 import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
 
+import springfox.documentation.builders.PathSelectors;
+import springfox.documentation.builders.RequestHandlerSelectors;
+import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spring.web.plugins.Docket;
+import springfox.documentation.swagger2.annotations.EnableSwagger2;
+
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @Configuration
@@ -81,4 +89,25 @@ public class DispatcherServletConfiguration extends WebMvcConfigurationSupport {
     configurer.favorPathExtension(false);
   }
   
+//  @Override
+//  public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
+//      configurer.enable();
+//  }
+//  
+//  @Override
+//  protected void addResourceHandlers(ResourceHandlerRegistry registry) {
+//    registry.addResourceHandler("swagger-ui.html").addResourceLocations("classpath:/META-INF/resources/");
+//    registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
+//  }
+//  
+//  @Bean
+//  public Docket customImplementation() {
+//    return new Docket(DocumentationType.SWAGGER_2)  
+//      .select()                                  
+//      .apis(RequestHandlerSelectors.any())              
+//      .paths(PathSelectors.any())                          
+//      .build();  
+//  }
+
+  
 }
diff --git a/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/WebConfigurer.java b/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/WebConfigurer.java
index 8401cd2..cc7dc22 100644
--- a/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/WebConfigurer.java
+++ b/modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/servlet/WebConfigurer.java
@@ -67,11 +67,23 @@ public class WebConfigurer implements ServletContextListener {
     dispatcherServletConfiguration.register(DispatcherServletConfiguration.class);
 
     log.debug("Registering Spring MVC Servlet");
-    ServletRegistration.Dynamic dispatcherServlet = servletContext.addServlet("dispatcher", new DispatcherServlet(dispatcherServletConfiguration));
+    ServletRegistration.Dynamic dispatcherServlet = servletContext.addServlet("dispatcher", 
+        new DispatcherServlet(dispatcherServletConfiguration));
     dispatcherServlet.addMapping("/service/*");
     dispatcherServlet.setLoadOnStartup(1);
     dispatcherServlet.setAsyncSupported(true);
     
+    log.debug("Registering Swagger Rest API Documentation");
+    AnnotationConfigWebApplicationContext swaggerDispatcherServletConfiguration = new AnnotationConfigWebApplicationContext();
+    swaggerDispatcherServletConfiguration.setParent(rootContext);
+    swaggerDispatcherServletConfiguration.register(SwaggerDispatcherServletConfiguration.class);
+
+    ServletRegistration.Dynamic swaggerDispatcherServlet = servletContext.addServlet("swagger", 
+        new DispatcherServlet(swaggerDispatcherServletConfiguration));
+    swaggerDispatcherServlet.addMapping("/swagger/*");
+    swaggerDispatcherServlet.setLoadOnStartup(1);
+    swaggerDispatcherServlet.setAsyncSupported(true);
+    
     return dispatcherServlet;
   }
 
